# setup and load data
setwd("/Users/ivan/Work_directory/Human-Activity-Recognition/")
library(caret)
train <- read.table('data/pml-training.csv', stringsAsFactor=F, sep=','
,header = T,na.strings = c("NA",""))
# explore data
summary(train)
names(train)
str(train)
dim(train)
# NA percents of each variable
na_train <- sapply(1:length(names(train)), function(i, na_base=c()){
na_col <- mean(is.na(train[i]))
na_base <- c(na_base, na_col)})
names(na_train) <- names(train)
# na_train <- sort(na_train,decreasing = T)
na_index <- na_train < .5
train2 <- train[,na_index]
train2 <- train2[,-c(1, 2)]
# non zero variable
nzv <- nearZeroVar(train2,saveMetrics = F)
training <- train2[,-nzv]
dim(training)
# split train and test
# run the model
set.seed(888)
# classProbs=TRUE, savePred=T,
fitControl <- trainControl(method = "cv",number = 10)
gbmGrid <-  expand.grid(interaction.depth = 5, n.trees = 300, shrinkage = 0.1)
fit<- train(as.factor(classe)~., data=training, method = 'gbm', trControl=fitControl, tuneGrid = gbmGrid)
pred <- predict(fit, training)
result <- confusionMatrix(pred, training$classe)
gbmImp <- varImp(fit,scale=F)
plot(gbmImp, top=10)
# test on test dataset
test <- read.table('data/pml-testing.csv', stringsAsFactor=F, sep=','
,header = T,na.strings = c("NA",""))
test2 <- test[,na_index]
testing <- test2[,-nzv]
pred_test <- predict(fit, newdata=testing)
results <- data.frame(test$problem_id, test$user_name, pred_test)
names(results) <- c('Problem_id','User_name','Classe')
results
pred_test <- predict(fit, newdata=test)
results <- data.frame(test$problem_id, test$user_name, pred_test)
names(results) <- c('Problem_id','User_name','Classe')
results
index
index <- createDataPartition(train$classe, p=0.8)
index
training <- training[index,]
index <- createDataPartition(train$classe, p=0.8, list=F)
training <- training[index,]
testing <- testing[-index,]
set.seed(888)
fitControl <- trainControl(method = "cv",number = 10)
gbmGrid <-  expand.grid(interaction.depth = 5, n.trees = 300, shrinkage = 0.1)
fit<- train(as.factor(classe)~., data=training, method = 'gbm', trControl=fitControl, tuneGrid = gbmGrid)
gbmImp <- varImp(fit,scale=F)
plot(gbmImp, top=10)
pred <- predict(fit, training)
result <- confusionMatrix(pred, training$classe)
result
pred_t <- predict(fit, testing)
testing <- testing[-index,]
pred_t <- predict(fit, testing)
# setup and load data
setwd("C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\Human-Activity-Recognition")
library(caret)
train <- read.table('data/pml-training.csv', stringsAsFactor=F, sep=','
,header = T,na.strings = c("NA",""))
# explore data
summary(train)
names(train)
str(train)
dim(train)
# NA percents of each variable
na_train <- sapply(1:length(names(train)), function(i, na_base=c()){
na_col <- mean(is.na(train[i]))
na_base <- c(na_base, na_col)})
names(na_train) <- names(train)
# na_train <- sort(na_train,decreasing = T)
na_index <- na_train < .5
train2 <- train[,na_index]
train2 <- train2[,-c(1, 2)]
# non zero variable
nzv <- nearZeroVar(train2,saveMetrics = F)
training <- train2[,-nzv]
dim(training)
# split train and test
index <- createDataPartition(train$classe, p=0.8, list=F)
training <- training[index,]
testing <- testing[-index,]
# run the model
set.seed(888)
# classProbs=TRUE, savePred=T,
fitControl <- trainControl(method = "cv",number = 10)
gbmGrid <-  expand.grid(interaction.depth = 5, n.trees = 300, shrinkage = 0.1)
fit<- train(as.factor(classe)~., data=training, method = 'gbm', trControl=fitControl, tuneGrid = gbmGrid)
gbmImp <- varImp(fit,scale=F)
plot(gbmImp, top=10)
# Out of sample error
pred <- predict(fit, training)
result <- confusionMatrix(pred, training$classe)
pred_t <- predict(fit, testing)
result <- confusionMatrix(pred_t, testing$classe)
# test on test dataset
test <- read.table('data/pml-testing.csv', stringsAsFactor=F, sep=','
,header = T,na.strings = c("NA",""))
# test2 <- test[,na_index]
# testing <- test2[,-nzv]
pred_test <- predict(fit, newdata=test)
results <- data.frame(test$problem_id, test$user_name, pred_test)
names(results) <- c('Problem_id','User_name','Classe')
results
gbmImp <- varImp(fit,scale=F)
plot(gbmImp, top=10)
pred <- predict(fit, training)
result <- confusionMatrix(pred, training$classe)
result
pred_t <- predict(fit, testing)
result_t <- confusionMatrix(pred_t, testing$classe)
pred_t
testing
training
testing$classe
testing <- testing[-index,]
pred_t <- predict(fit, testing)
result_t <- confusionMatrix(pred_t, testing$classe)
index <- createDataPartition(train$classe, p=0.8, list=F)
testing <- training[-index,]
rm(list=ls())
setwd("C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\Human-Activity-Recognition")
library(caret)
train <- read.table('data/pml-training.csv', stringsAsFactor=F, sep=','
,header = T,na.strings = c("NA",""))
na_train <- sapply(1:length(names(train)), function(i, na_base=c()){
na_col <- mean(is.na(train[i]))
na_base <- c(na_base, na_col)})
names(na_train) <- names(train)
na_index <- na_train < .5
train2 <- train[,na_index]
train2 <- train2[,-c(1, 2)]
nzv <- nearZeroVar(train2,saveMetrics = F)
training <- train2[,-nzv]
dim(training)
index <- createDataPartition(train$classe, p=0.8, list=F)
index <- createDataPartition(training$classe, p=0.8, list=F)
train_md <- training[index,]
test_md <- training[-index,]
test_md
set.seed(888)
fitControl <- trainControl(method = "cv",number = 10)
gbmGrid <-  expand.grid(interaction.depth = 5, n.trees = 300, shrinkage = 0.1)
fit<- train(as.factor(classe)~., data=train_md, method = 'gbm', trControl=fitControl, tuneGrid = gbmGrid)
gbmImp <- varImp(fit,scale=F)
plot(gbmImp, top=10)
pred <- predict(fit, train_md)
result <- confusionMatrix(pred, train_md$classe)
pred_t <- predict(fit, test_md)
result_t <- confusionMatrix(pred_t, test_md$classe)
test <- read.table('data/pml-testing.csv', stringsAsFactor=F, sep=','
,header = T,na.strings = c("NA",""))
pred_test <- predict(fit, newdata=test)
results <- data.frame(test$problem_id, test$user_name, pred_test)
names(results) <- c('Problem_id','User_name','Classe')
results
result
result_t
fitControl <- trainControl(method = "none")
gbmGrid <-  expand.grid(interaction.depth = 5, n.trees = 300, shrinkage = 0.1)
fit<- train(as.factor(classe)~., data=train_md, method = 'gbm', trControl=fitControl, tuneGrid = gbmGrid)
gbmImp <- varImp(fit,scale=F)
plot(gbmImp, top=10)
pred <- predict(fit, train_md)
result <- confusionMatrix(pred, train_md$classe)
pred_t <- predict(fit, test_md)
result_t <- confusionMatrix(pred_t, test_md$classe)
result
result_t
result_t[[2]]
require(knitr)
knit2html('HAR_report.Rmd')
fitControl <- trainControl(method = "cv",number = 10)
gbmGrid <-  expand.grid(interaction.depth = 5, n.trees = 300, shrinkage = 0.1)
fit<- train(as.factor(classe)~., data=train_md, method = 'gbm', trControl=fitControl, tuneGrid = gbmGrid)
gbmImp <- varImp(fit,scale=F)
plot(gbmImp, top=10)
pred_test <- predict(fit, newdata=test)
results <- data.frame(test$problem_id, test$user_name, pred_test)
names(results) <- c('Problem_id','User_name','Classe')
results
results <- results[,c(1,3)]
results
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(results)
results <- results[,2]
results
pml_write_files(results)
